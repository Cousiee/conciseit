---
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { Item } from '~/types';

export interface Props {
  items?: Array<Item>;
  defaultIcon?: string;
  classes?: Record<string, string>;
}

const { items = [], classes = {}, defaultIcon } = Astro.props as Props;

const {
  container: containerClass = '',
  icon: defaultIconClass = 'text-primary dark:text-slate-200 border-primary dark:border-blue-700',
} = classes;
---

{
  items && items.length && (
    <ol class={twMerge('sm:flex justify-center', containerClass)}>
      {items.map(({ title, description, icon, classes: itemClasses = {} }, index = 0) => (
        <li class="relative mb-6 sm:mb-0 grow basis-0">
          <div class="flex items-center w-full">
            {index > 0 ? (
              <div class="hidden sm:flex w-[calc(50%-2.5rem/2)] bg-gray-200 h-0.5 dark:bg-gray-700" />
            ) : null}
            <Icon
              name={icon || defaultIcon}
              class={twMerge(
                'w-10 h-10 p-2 rounded-full border-2 m-auto sm:m-0',
                defaultIconClass,
                itemClasses?.icon,
                index > 0 && 'sm:mr-auto',
                index < items.length - 1 && 'sm:ml-auto'
              )}
            />
            {index < items.length - 1 ? (
              <div class="hidden sm:flex w-[calc(50%-2.5rem/2)] bg-gray-200 h-0.5 dark:bg-gray-700" />
            ) : null}
          </div>
          <div class="mt-3 text-center px-4">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{title}</h3>
            <p
              class="text-base mt-4 leading-tight	font-normal text-gray-500 dark:text-gray-400"
              set:html={description}
            />
          </div>
        </li>
      ))}
    </ol>
  )
}
